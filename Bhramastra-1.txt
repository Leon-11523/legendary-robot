----------------------
Slip 1
----------------------
Q1
#include<stdio.h>
void print(int frameno,int frame[])
{
            int j;
            for(j=0;j<frameno;j++)
            printf("%d\t",frame[j]);
            printf("\n");
}         
int main()
{
            int i,j,k,n,page[50],frameno,frame[10],move=0,flag,count=0,count1[10]={0},
                        repindex,leastcount;
            printf("Enter the number of pages\n");
            scanf("%d",&n);
            printf("Enter the page reference numbers\n");
            for(i=0;i<n;i++)
            scanf("%d",&page[i]);
            printf("Enter the number of frames\n");
            scanf("%d",&frameno);
            for(i=0;i<frameno;i++)
            frame[i]=-1;
            printf("Page reference string\tFrames\n");
            for(i=0;i<n;i++)
            {
                        printf("%d\t\t\t",page[i]);
                        flag=0;
                        for(j=0;j<frameno;j++)
                        {
                                    if(page[i]==frame[j])
                                    {
                                                flag=1;
                                                count1[j]++;
                                                printf("No replacement\n");
                                                break;
                                    }
                        }
                        if(flag==0&&count<frameno)
                        {
                                    frame[move]=page[i];
                                    count1[move]=1;
                                    move=(move+1)%frameno;
                                    count++;
                                    print(frameno,frame);
                        }
                        else if(flag==0)
                        {
                                    repindex=0;
                                    leastcount=count1[0];
                                    for(j=1;j<frameno;j++)
                                    {
                                                if(count1[j]<leastcount)
                                                {
                                                            repindex=j;
                                                            leastcount=count1[j];
                                                }
                                    }
                                   
                                    frame[repindex]=page[i];
                                    count1[repindex]=1;
                                    count++;
                                    print(frameno,frame);
                        }
            }
            printf("Number of page faults is %d\n",count);
            return 0;
}

********
Q2
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void list(char *dn, char op) 
{ 
 DIR *dp; 
 struct dirent *entry; 
 int dc=0,fc=0; 
 dp=opendir(dn); 
 if(dp==NULL) 
 { 
 printf("DIR %s not found.\n",dn); 
 return; 
 } 
 switch(op) 
 { 
 case'f': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\n",entry->d_name); 
 } 
 break; 
 case'n': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_DIR) 
 dc++; 
 if(entry->d_type==DT_REG) 
 fc++; 
 } 
 printf("%d Dir(s)\t%d File(s)\n",dc,fc); 
 break; 
 closedir(dp); 
} 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"list")==0) 
 list(args[2],args[1][0]); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
} 


--------------------
Slip 2
--------------------
Q1
#include<stdio.h>
#define MAX 20

int frames[MAX], ref[MAX], mem[MAX][MAX], faults, sp, m, n, count[MAX];

void accept()
{
	printf("Enter number of frames: ");
	scanf("%d",&n);
	printf("\nEnter number of references: ");
	scanf("%d",&m);
	printf("\nEnter reference string: \n");
	for(int i=0; i<m; i++)
	{
		printf("[%d] = ",i);
		scanf("%d",&ref[i]);
	}
}

void disp()
{
	int i,j;
	for(i=0; i<m; i++)
		printf("%3d",ref[i]);
	printf("\n\n");
	for(i=0; i<n; i++)
	{
		for(j=0; j<m; j++)
		{
			if(mem[i][j])
				printf("%3d",mem[i][j]);
			else
				printf("   ");
		}
		printf("\n");
	}
	printf("Total page faults: %d\n",faults);
}

int search(int pno)
{
	for(int i=0; i<n; i++)
	{
		if(frames[i] == pno)
			return i;
	}
	return -1;
}

int get_mfu(int sp)
{
	int i, max_i, max = -9999;
	i = sp;
	do
	{
		if(count[i] > max)
		{
			max = count[i];
			max_i = i;
		}
		i = (i+1)%n;
	} while(i != sp);
	return max_i;
}

void mfu()
{
	int i,j,k;
	for(i=0; i<m && sp<n; i++)
	{
		k = search(ref[i]);
		if(k == -1)
		{
			frames[sp] = ref[i];
			count[sp]++;
			faults++;
			sp++;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
		else
			count[k]++;
	}
	sp=0;
	for(i=0; i<m; i++)
	{
		k = search(ref[i]);
		if(k == -1)
		{
			sp = get_mfu(sp);
			frames[sp] = ref[i];
			count[sp] = 1;
			faults++;
			sp = (sp+1)%n;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
		else
			count[k]++;
	}
}

int main()
{
	accept();
	mfu();
	disp();
	return 0;
}


*****
Q2
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL,""); 
 } 
 tok[i]=NULL; 
} 
void search(char *fn, char op,char *pattern) 
{ 
 int fh,count=0,i=0,j=0; 
 char buff[255],c,*p; 
 fh=open(fn,O_RDONLY); 
 if(fh==-1) 
 { 
 printf("File %s not found.\n",fn); 
 return; 
 } 
 switch(op) 
 { 
 case'a': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 i++; 
 if(strstr(buff,pattern)) 
 printf("%d: %s",i,buff); 
 } 
 } 
 case'c': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 p=buff; 
 while(p=strstr(p,pattern)) 
 { 
 count++; 
 p++; 
 } 
 } 
 } 
 close(fh); 
 } 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"search")==0) 
 search(args[2],args[1][0],args[3]); 
 else if(strcmp(args[0],"exit")==0) 
 exit(0); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
} 


-----------------------
Slip 4
-----------------------
Q1
	#include<stdio.h>
	#define MAX 20
	
	int frames[MAX], ref[MAX], mem[MAX][MAX], faults, sp, m, n, count[MAX];
	
	void accept()
	{
		printf("Enter number of frames: ");
		scanf("%d",&n);
		printf("\nEnter number of references: ");
		scanf("%d",&m);
		printf("\nEnter reference string: \n");
		for(int i=0; i<m; i++)
		{
			printf("[%d] = ",i);
			scanf("%d",&ref[i]);
		}
	}
	
	void disp()
	{
		int i,j;
		for(i=0; i<m; i++)
			printf("%3d",ref[i]);
		printf("\n\n");
		for(i=0; i<n; i++)
		{
			for(j=0; j<m; j++)
			{
				if(mem[i][j])
					printf("%3d",mem[i][j]);
				else
					printf("   ");
			}
			printf("\n");
		}
		printf("Total page faults: %d\n",faults);
	}
	
	int search(int pno)
	{
		for(int i=0; i<n; i++)
		{
			if(frames[i] == pno)
				return i;
		}
		return -1;
	}
	
	int get_mfu(int sp)
	{
		int i, max_i, max = -9999;
		i = sp;
		do
		{
			if(count[i] > max)
			{
				max = count[i];
				max_i = i;
			}
			i = (i+1)%n;
		} while(i != sp);
		return max_i;
	}
	
	void mfu()
	{
		int i,j,k;
		for(i=0; i<m && sp<n; i++)
		{
			k = search(ref[i]);
			if(k == -1)
			{
				frames[sp] = ref[i];
				count[sp]++;
				faults++;
				sp++;
				for(j=0; j<n; j++)
					mem[j][i] = frames[j];
			}
			else
				count[k]++;
		}
		sp=0;
		for(i=0; i<m; i++)
		{
			k = search(ref[i]);
			if(k == -1)
			{
				sp = get_mfu(sp);
				frames[sp] = ref[i];
				count[sp] = 1;
				faults++;
				sp = (sp+1)%n;
				for(j=0; j<n; j++)
					mem[j][i] = frames[j];
			}
			else
				count[k]++;
		}
	}
	
	int main()
	{
		accept();
		mfu();
		disp();
		return 0;
	}


*********
Q2
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void search(char *fn, char op,char *pattern) 
{ 
 int fh,count=0,i=0,j=0; 
 char buff[255],c,*p; 
 fh=open(fn,O_RDONLY); 
 if(fh==-1) 
 { 
 printf("File %s Not found.\n",fn); 
 return; 
 } 
 switch(op) 
 { 
 case'f': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 i++; 
 if(strstr(buff,pattern)) 
 { 
 printf("%d: %s",i,buff); 
 break; 
 } 
 } 
 } 
 break; 
 case'c': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 p=buff; 
 while(p=strstr(p,pattern)) 
 { 
 count++; 
 p++; 
 } 
 } 
 } 
 close(fh); 
 } 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"search")==0) 
 search(args[2],args[1][0],args[3]); 
 else if(strcmp(args[0],"exit")==0) 
 exit(0); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
}


--------------------
Slip 5
-------------------
Q1
#include <stdio.h>
#include <limits.h>

int findOptimalIndex(int str[], int frame[], int n, int nf, int startIndex) {
    int res = -1, farthest = -1;
    
    for (int i = 0; i < nf; i++) {
        int j;
        for (j = startIndex; j < n; j++) {
            if (frame[i] == str[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }

        // If a page is not present in the future page references, return its index.
        if (j == n)
            return i;
    }

    return res;
}

int main() {
    int i, n, str[50], frame[10], nf, k, avail, fcount = 0;

    printf("Enter no of pages: ");
    scanf("%d", &n);
    printf("Enter page number: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &str[i]);
    }

    printf("Enter the no of frames: ");
    scanf("%d", &nf);

    for (i = 0; i < nf; i++) {
        frame[i] = -1;
    }

    printf("\n ref string   \t page frame       \thit/fault\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t", str[i]);
        avail = 0; // Default value of avail flag is 0

        for (k = 0; k < nf; k++)
            if (frame[k] == str[i]) {
                avail = 1; // Page found
                for (k = 0; k < nf; k++)
                    printf("%d\t", frame[k]);
                printf("H");
                break;
            }

        if (avail == 0) {
            int replaceIndex = findOptimalIndex(str, frame, n, nf, i + 1);
            frame[replaceIndex] = str[i];
            fcount++;

            for (k = 0; k < nf; k++)
                printf("%d\t", frame[k]);
            printf("F");
        }
        printf("\n");
    }

    printf("Page fault is: %d", fcount);
    return 0;
}


********
Q2
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void search(char *fn, char op,char *pattern) 
{ 
 int fh,count=0,i=0,j=0; 
 char buff[255],c,*p; 
 fh=open(fn,O_RDONLY); 
 if(fh==-1) 
 { 
 printf("File %s Not found.\n",fn); 
 return; 
 } 
 switch(op) 
 { 
 case'f': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 i++; 
 if(strstr(buff,pattern)) 
 { 
 printf("%d: %s",i,buff); 
 break; 
 } 
 } 
 } 
 break; 
 case'c': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 p=buff; 
 while(p=strstr(p,pattern)) 
 { 
 count++; 
 p++; 
 } 
 } 
 } 
 close(fh); 
 } 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"search")==0) 
 search(args[2],args[1][0],args[3]); 
 else if(strcmp(args[0],"exit")==0) 
 exit(0); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
}


------------------------
Slip 7
------------------------
Q1
#include <stdio.h>
#include <limits.h>

int findOptimalIndex(int str[], int frame[], int n, int nf, int startIndex) {
    int res = -1, farthest = -1;
    
    for (int i = 0; i < nf; i++) {
        int j;
        for (j = startIndex; j < n; j++) {
            if (frame[i] == str[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }

        // If a page is not present in the future page references, return its index.
        if (j == n)
            return i;
    }

    return res;
}

int main() {
    int i, n, str[50], frame[10], nf, k, avail, fcount = 0;

    printf("Enter no of pages: ");
    scanf("%d", &n);
    printf("Enter page number: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &str[i]);
    }

    printf("Enter the no of frames: ");
    scanf("%d", &nf);

    for (i = 0; i < nf; i++) {
        frame[i] = -1;
    }

    printf("\n ref string   \t page frame       \thit/fault\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t", str[i]);
        avail = 0; // Default value of avail flag is 0

        for (k = 0; k < nf; k++)
            if (frame[k] == str[i]) {
                avail = 1; // Page found
                for (k = 0; k < nf; k++)
                    printf("%d\t", frame[k]);
                printf("H");
                break;
            }

        if (avail == 0) {
            int replaceIndex = findOptimalIndex(str, frame, n, nf, i + 1);
            frame[replaceIndex] = str[i];
            fcount++;

            for (k = 0; k < nf; k++)
                printf("%d\t", frame[k]);
            printf("F");
        }
        printf("\n");
    }

    printf("Page fault is: %d", fcount);
    return 0;
}

*********
Q2
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void search(char *fn, char op,char *pattern) 
{ 
 int fh,count=0,i=0,j=0; 
 char buff[255],c,*p; 
 fh=open(fn,O_RDONLY); 
 if(fh==-1) 
 { 
 printf("File %s Not found.\n",fn); 
 return; 
 } 
 switch(op) 
 { 
 case'f': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 i++; 
 if(strstr(buff,pattern)) 
 { 
 printf("%d: %s",i,buff); 
 break; 
 } 
 } 
 } 
 break; 
 case'c': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 p=buff; 
 while(p=strstr(p,pattern)) 
 { 
 count++; 
 p++; 
 } 
 } 
 } 
 close(fh); 
 } 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"search")==0) 
 search(args[2],args[1][0],args[3]); 
 else if(strcmp(args[0],"exit")==0) 
 exit(0); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
} 


----------------------
Slip 8
----------------------
Q1
#include<stdio.h>
#define MAX 20

int frames[MAX], ref[MAX], mem[MAX][MAX], faults, sp, m, n, time[MAX];

void accept()
{
	printf("Enter the number of frames: ");
	scanf("%d",&n);
	printf("\nEnter the number of references: ");
	scanf("%d",&m);
	printf("\nEnter reference string: \n");
	for(int i=0; i<m; i++)
	{
		printf("[%d] = ",i);
		scanf("%d",&ref[i]);
	}
}

void disp()
{
	int i,j;
	printf("\n");
	for(i=0; i<m; i++)
		printf("%3d", ref[i]);
	printf("\n\n");
	for(i=0; i<n; i++)
	{
		for(j=0; j<m; j++)
		{
			if(mem[i][j])
				printf("%3d", mem[i][j]);
			else
				printf("   ");
		}
		printf("\n");
	}
	printf("\nTotal page faults = %d\n", faults);
}

int search(int pno)
{
	for(int i=0; i<n; i++)
	{
		if(frames[i] == pno)
			return i;
	}
	return -1;
}

int get_lru()
{
	int i, min_i, min = 9999;
	for(i=0; i<n; i++)
	{
		if(time[i] < min)
		{
			min = time[i];
			min_i = i;
		}
	}
	return min_i;
}

void lru()
{
	int i,j,k;
	for(i=0; i<m && sp<n; i++)
	{
		k = search(ref[i]);
		if(k == -1)
		{
			frames[sp] = ref[i];
			time[sp] = i;
			faults++;
			sp++;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
		else
			time[k] = i;
	}
	
	for(i=0; i<m; i++)
	{
		k = search(ref[i]);
		if(k == -1)
		{
			sp = get_lru();
			frames[sp] = ref[i];
			time[sp] = i;
			faults++;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
		else
			time[k] = i;
	}
}

int main()
{
	accept();
	lru();
	disp();
	return 0;
}


************
Q2
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void search(char *fn, char op,char *pattern) 
{ 
 int fh,count=0,i=0,j=0; 
 char buff[255],c,*p; 
 fh=open(fn,O_RDONLY); 
 if(fh==-1) 
 { 
 printf("File %s Not found.\n",fn); 
 return; 
 } 
 switch(op) 
 { 
 case'f': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 i++; 
 if(strstr(buff,pattern)) 
 { 
 printf("%d: %s",i,buff); 
 break; 
 } 
 } 
 } 
 break; 
 case'c': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 p=buff; 
 while(p=strstr(p,pattern)) 
 { 
 count++; 
 p++; 
 } 
 } 
 } 
 close(fh); 
 } 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"search")==0) 
 search(args[2],args[1][0],args[3]); 
 else if(strcmp(args[0],"exit")==0) 
 exit(0); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
}


-----------------------
Slip 9
-----------------------
Q1
#include<stdio.h>
#define MAX 20

int frames[MAX], ref[MAX], mem[MAX][MAX], faults, sp, m, n, count[MAX];

void accept()
{
	printf("Enter number of frames: ");
	scanf("%d",&n);
	printf("\nEnter number of references: ");
	scanf("%d",&m);
	printf("\nEnter reference string: \n");
	for(int i=0; i<m; i++)
	{
		printf("[%d] = ",i);
		scanf("%d",&ref[i]);
	}
}

void disp()
{
	int i,j;
	for(i=0; i<m; i++)
		printf("%3d",ref[i]);
	printf("\n\n");
	for(i=0; i<n; i++)
	{
		for(j=0; j<m; j++)
		{
			if(mem[i][j])
				printf("%3d",mem[i][j]);
			else
				printf("   ");
		}
		printf("\n");
	}
	printf("Total page faults: %d\n",faults);
}

int search(int pno)
{
	for(int i=0; i<n; i++)
	{
		if(frames[i] == pno)
			return i;
	}
	return -1;
}

void fifo()
{
	int i,j;
	for(i=0; i<m; i++)
	{
		if(search(ref[i]) == -1)
		{
			frames[sp] = ref[i];
			sp = (sp + 1) % n;
			faults++;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
	}
}

int main()
{
	accept();
	fifo();
	disp();
	return 0;
}


**************
Q2
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void search(char *fn, char op,char *pattern) 
{ 
 int fh,count=0,i=0,j=0; 
 char buff[255],c,*p; 
 fh=open(fn,O_RDONLY); 
 if(fh==-1) 
 { 
 printf("File %s Not found.\n",fn); 
 return; 
 } 
 switch(op) 
 { 
 case'f': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 i++; 
 if(strstr(buff,pattern)) 
 { 
 printf("%d: %s",i,buff); 
 break; 
 } 
 } 
 } 
 break; 
 case'a': 
 while(read(fh,&c,1)) 
 { 
 buff[j++]=c; 
 if(c=='\n') 
 { 
 buff[j]='\0'; 
 j=0; 
 i++; 
 if(strstr(buff,pattern)) 
 printf("%d: %s",i,buff); 
 } 
 } 
 } 
 close(fh); 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"search")==0) 
 search(args[2],args[1][0],args[3]); 
 else if(strcmp(args[0],"exit")==0) 
 exit(0); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
}


----------------------
Slip 10
----------------------
Q1
#include<stdio.h>
#define MAX 20

int frames[MAX], ref[MAX], mem[MAX][MAX], faults, sp, m, n, count[MAX];

void accept()
{
	printf("Enter number of frames: ");
	scanf("%d",&n);
	printf("\nEnter number of references: ");
	scanf("%d",&m);
	printf("\nEnter reference string: \n");
	for(int i=0; i<m; i++)
	{
		printf("[%d] = ",i);
		scanf("%d",&ref[i]);
	}
}

void disp()
{
	int i,j;
	for(i=0; i<m; i++)
		printf("%3d",ref[i]);
	printf("\n\n");
	for(i=0; i<n; i++)
	{
		for(j=0; j<m; j++)
		{
			if(mem[i][j])
				printf("%3d",mem[i][j]);
			else
				printf("   ");
		}
		printf("\n");
	}
	printf("Total page faults: %d\n",faults);
}

int search(int pno)
{
	for(int i=0; i<n; i++)
	{
		if(frames[i] == pno)
			return i;
	}
	return -1;
}

void fifo()
{
	int i,j;
	for(i=0; i<m; i++)
	{
		if(search(ref[i]) == -1)
		{
			frames[sp] = ref[i];
			sp = (sp + 1) % n;
			faults++;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
	}
}

int main()
{
	accept();
	fifo();
	disp();
	return 0;
}

**********
Q2
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void list(char *dn, char op) 
{ 
 DIR *dp; 
 struct dirent *entry; 
 int dc=0,fc=0; 
 dp=opendir(dn); 
 if(dp==NULL) 
 { 
 printf("DIR %s not found.\n",dn); 
 return; 
 } 
 switch(op) 
 { 
 case'f': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\n",entry->d_name); 
 } 
 break; 
 case'i': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\t%d\n",entry->d_name,entry->d_fileno); 
 } 
 } 
 closedir(dp); 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"list")==0) 
 list(args[2],args[1][0]); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
} 


--------------------
Slip 12
--------------------
Q1
#include<stdio.h>
#define MAX 20

int frames[MAX], ref[MAX], mem[MAX][MAX], faults, sp, m, n, time[MAX];

void accept()
{
	printf("Enter the number of frames: ");
	scanf("%d",&n);
	printf("\nEnter the number of references: ");
	scanf("%d",&m);
	printf("\nEnter reference string: \n");
	for(int i=0; i<m; i++)
	{
		printf("[%d] = ",i);
		scanf("%d",&ref[i]);
	}
}

void disp()
{
	int i,j;
	printf("\n");
	for(i=0; i<m; i++)
		printf("%3d", ref[i]);
	printf("\n\n");
	for(i=0; i<n; i++)
	{
		for(j=0; j<m; j++)
		{
			if(mem[i][j])
				printf("%3d", mem[i][j]);
			else
				printf("   ");
		}
		printf("\n");
	}
	printf("\nTotal page faults = %d\n", faults);
}

int search(int pno)
{
	for(int i=0; i<n; i++)
	{
		if(frames[i] == pno)
			return i;
	}
	return -1;
}

int get_lru()
{
	int i, min_i, min = 9999;
	for(i=0; i<n; i++)
	{
		if(time[i] < min)
		{
			min = time[i];
			min_i = i;
		}
	}
	return min_i;
}

void lru()
{
	int i,j,k;
	for(i=0; i<m && sp<n; i++)
	{
		k = search(ref[i]);
		if(k == -1)
		{
			frames[sp] = ref[i];
			time[sp] = i;
			faults++;
			sp++;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
		else
			time[k] = i;
	}
	
	for(i=0; i<m; i++)
	{
		k = search(ref[i]);
		if(k == -1)
		{
			sp = get_lru();
			frames[sp] = ref[i];
			time[sp] = i;
			faults++;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
		else
			time[k] = i;
	}
}

int main()
{
	accept();
	lru();
	disp();
	return 0;
}



***********
Q2
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void list(char *dn, char op) 
{ 
 DIR *dp; 
 struct dirent *entry; 
 int dc=0,fc=0; 
 dp=opendir(dn); 
 if(dp==NULL) 
 { 
 printf("DIR %s not found.\n",dn); 
 return; 
 } 
 switch(op) 
 { 
 case'f': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\n",entry->d_name); 
 } 
 break; 
 case'n': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_DIR) 
 dc++; 
 if(entry->d_type==DT_REG) 
 fc++; 
 } 
 printf("%d Dir(s)\t%d File(s)\n",dc,fc); 
 break; 
 closedir(dp); 
} 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"list")==0) 
 list(args[2],args[1][0]); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
}


----------------------------
Slip 14
----------------------------
Q1
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<stdlib.h>
#include<string.h>
#include<dirent.h>
void make_toks(char *s, char *tok[])
{
int i=0;
char *p;
p=strtok(s," ");
while(p!=NULL)
{
tok[i++]=p;
p=strtok(NULL," ");
}
tok[i]=NULL;
}
void typeline(char *fn, char *op)
{
int fh,i,j,n;
char c;
fh=open(fn,O_RDONLY);
if(fh==-1)
{
printf("File %s not found.\n",fn);
return;
}
if(n>0)
{
i=0;
while(read(fh,&c,1)>0)
{
printf("%c",c);
if(c=='\n')
i++;
if(i==n)
break;
}
 }
close(fh);
}
int main()
{
char buff[80],*args[10];
int pid;
while(1)
{
printf("\nmyshell$");
fflush(stdin);
fgets(buff,80,stdin);
buff[strlen(buff)-1]='\0';
make_toks(buff,args);
if(strcmp(args[0],"typeline")==0)
typeline(args[2],args[1]);
else if(strcmp(args[0],"exit")==0)
exit(0);
else
{
pid=fork();
if(pid>0)
wait(NULL);
else
{
if(execvp(args[0],args)==-1)
printf("Bad Command.\n");
}
}
}
}

************
Q2
#include<stdio.h>

int findWaitingTime(int bt[], int wt[], int n)
{
	int wtavg=0, i;
	wt[0] = 0;
	for(i=1; i<n; i++)
	{
		wt[i] = bt[i-1] + wt[i-1];
		wtavg = wtavg + wt[i];
	}
	return wtavg;
}

int findTurnAroundTime(int bt[], int wt[], int tat[], int n)
{
	int tatavg = 0;
	for(int i=0; i<n; i++)
	{
		tat[i] = bt[i] + wt[i];
		tatavg = tatavg + tat[i];
	}
	return tatavg;
}

void sort(int n, int bt[], int p[])
{
	int i,j,pos,temp;
	for(i=0; i<n; i++)
	{
		pos=i;
		for(j=i+1; j<n; j++)
		{
			if(bt[j] < bt[pos])
				pos = j;
		}
		temp = bt[i];
		bt[i] = bt[pos];
		bt[pos] = temp;
		temp = p[i];
		p[i] = p[pos];
		p[pos] = temp;
	}
}

void main()
{
	int bt[10], tat[10], wt[10], p[10], i, n, avgtat, avgwt;
	printf("\nEnter number of processes: ");
	scanf("%d",&n);
	printf("\nEnter burst time: ");
	for(i=0; i<n; i++)
	{
		p[i] = i;
		printf("\nProcess %d: ",p[i]);
		scanf("%d",&bt[i]);
	}
	printf("\nBefore sorting: \n");
	printf("P\tBT\n");
	for(i=0; i<n; i++)
	{
		printf("%d",p[i]);
		printf("\t%d\n",bt[i]);
	}
	sort(n,bt,p);
	printf("\nAfter non preemtive SJF:\n");
	avgwt = findWaitingTime(bt,wt,n)/n;
	avgtat = findTurnAroundTime(bt,wt,tat,n)/n;
	printf("P\tBT\tWT\tTAT\n");
	for(i=0; i<n; i++)
	{
		printf("%d",p[i]);
		printf("\t%d",bt[i]);
		printf("\t%d",wt[i]);
		printf("\t%d\n",tat[i]);
	}
	printf("\nGannt Chart\n");
	for(i=0; i<n; i++)
		printf("p%d\t",i);
	printf("\n");
	for(i=0; i<n; i++)
		printf("%d\t",wt[i]);
	printf("%d\n", tat[i-1]);
	printf("\nAverage waiting time = %d", avgwt);
	printf("\nAverage turn around time = %d\n", avgtat);
}


---------------------------
Slip 16
---------------------------
Q1
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<stdlib.h>
#include<string.h>
#include<dirent.h>
void make_toks(char *s, char *tok[])
{
int i=0;
char *p;
p=strtok(s," ");
while(p!=NULL)
{
tok[i++]=p;
p=strtok(NULL," ");
}
tok[i]=NULL;
}
void count(char *fn, char op)
{
int fh,cc=0,wc=0,lc=0;
char c;
fh=open(fn,O_RDONLY);
if(fh==-1)
{
printf("File %s not found.\n",fn);
return;
}
while(read(fh,&c,1)>0)
{
if(c==' ')
wc++;
else if(c=='\n')
{
wc++;
lc++;
}
cc++;
}
close(fh);
switch(op)
{
case 'c':
printf("No. of Chracters:%d\n",cc);
break;
case 'w':
printf("No. of Words:%d\n",wc);
break;
}
}
int main()
{
char buff[80],*args[10];
int pid;
while(1)
{
printf("\nmyshell$");
fflush(stdin);
fgets(buff,80,stdin);
buff[strlen(buff)-1]='\0';
make_toks(buff,args);
if(strcmp(args[0],"count")==0)
count(args[2],args[1][0]);
else
{
pid=fork();
if(pid>0)
wait();
else
{
if(execvp(args[0],args)==-1)
printf("Bad Command.\n");
exit(0);
}
}
}
}

**********
Q2
#include<stdio.h>
int findWaitingTime(int bt[], int wt[], int n)
{
        int  wtavg=0,i;
        wt[0]=0;
        for(i=1;i<n;i++)
        {
                wt[i]=bt[i-1]+wt[i-1]+2;
                wtavg=wtavg+wt[i];
        }
        return(wtavg);
}
int findTurnAroundTime(int bt[],int wt[], int tat[], int n)
{
        int tatavg=0,i;
        for(i=0;i<n;i++)
        {
        tat[i]=bt[i]+wt[i];
        tatavg=tatavg+tat[i];
}
        return(tatavg);
}
void sort(int n, int bt[], int p[], int pr[])
{
        int i, j, pos, temp;
        for(i=0; i<n; i++)
        {
                pos=i;
                for(j=i+1;j<n; j++ )
                {
                	if(pr[j]<pr[pos])
                	{
                        pos=j;
            		}
          		}
          		temp=bt[i];
          		bt[i]=bt[pos];
          		bt[pos]=temp;
        		temp=p[i];
        		p[i]=p[pos];
        		p[pos]=temp;
        		temp=pr[i];
        		pr[i]=pr[pos];
        		pr[pos]=temp;
  }
}
void main()
{
        int  at[10], bt[10], wt[10], tat[10], p[10], pr[10], i,n;
        int avgwt, avgtat;
        printf("\nEnter The Number of Process\n");
        scanf("%d",&n);
        printf("\nEnter The Burst Time and Priority\n");
        for(i=0;i<n;i++)
        {
                p[i]=i;
                printf("\nProcess %d:\t",p[i]);
                scanf("%d %d",&bt[i],&pr[i]);
                printf("\n");
        }
        printf("\nBefore Sorting\n");
        printf("P|\tBT|\tPr\n");
        for(i=0;i<n;i++)
        {
                printf("%d",p[i]);
                printf("\t%d",bt[i]);
                printf("\t%d\n",pr[i]);
        }
        sort(n, bt, p, pr);
        printf("\nAfter The Non Preemptive SJF\n");
        avgwt=findWaitingTime(bt, wt, n)/n;
        avgtat=findTurnAroundTime(bt, wt, tat, n)/n;
        printf("P|\tBT|\tPr|\tWT|\tTAT\n");
        for(i=0; i<n; i++)
        {
                printf("%d",p[i]);
                printf("\t%d", bt[i]);
                printf("\t%d", pr[i]);
                printf("\t%d", wt[i]);
                printf("\t%d\n", tat[i]);
        }
        printf("\nGantt Chart\n");
        for(i=0; i<n; i++)
        {       printf("| P%d ", i);
        }
        printf("|\n");
        for(i=0; i<n; i++)
        {
			printf("%d   ", wt[i]);
        }
        printf("%d\n",tat[i-1]);
        printf("Average Waiting Time= %d", avgwt);
        printf("\n");
        printf("Avegare Turn Around Time= %d", avgtat);
}



------------------------
Slip 17
------------------------
Q1
#include <stdio.h>
#include <limits.h>

int findOptimalIndex(int str[], int frame[], int n, int nf, int startIndex) {
    int res = -1, farthest = -1;
    
    for (int i = 0; i < nf; i++) {
        int j;
        for (j = startIndex; j < n; j++) {
            if (frame[i] == str[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }

        // If a page is not present in the future page references, return its index.
        if (j == n)
            return i;
    }

    return res;
}

int main() {
    int i, n, str[50], frame[10], nf, k, avail, fcount = 0;

    printf("Enter no of pages: ");
    scanf("%d", &n);
    printf("Enter page number: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &str[i]);
    }

    printf("Enter the no of frames: ");
    scanf("%d", &nf);

    for (i = 0; i < nf; i++) {
        frame[i] = -1;
    }

    printf("\n ref string   \t page frame       \thit/fault\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t", str[i]);
        avail = 0; // Default value of avail flag is 0

        for (k = 0; k < nf; k++)
            if (frame[k] == str[i]) {
                avail = 1; // Page found
                for (k = 0; k < nf; k++)
                    printf("%d\t", frame[k]);
                printf("H");
                break;
            }

        if (avail == 0) {
            int replaceIndex = findOptimalIndex(str, frame, n, nf, i + 1);
            frame[replaceIndex] = str[i];
            fcount++;

            for (k = 0; k < nf; k++)
                printf("%d\t", frame[k]);
            printf("F");
        }
        printf("\n");
    }

    printf("Page fault is: %d", fcount);
    return 0;
}

*********
Q2
#include<stdio.h>

int findWaitingTime(int bt[], int wt[], int n)
{
	int wtavg = 0;
	wt[0] = 0;
	for(int i=0; i<n; i++)
	{
		wt[i] = bt[i-1] + wt[i-1];
		wtavg = wtavg + wt[i];
	}
	return wtavg;
}

int findTurnAroundTime(int bt[], int wt[], int tat[], int n)
{
	int tatavg = 0;
	for(int i=0; i<n; i++)
	{
		tat[i] = wt[i] + bt[i];
		tatavg = tatavg + tat[i];
	}
	return tatavg;
}

void main()
{
	int at[10], bt[10], wt[10], tat[10], i, n, avgwt, avgtat;
	printf("\nEnter the number of processes : ");
	scanf("%d",&n);
	for(i=0; i<n; i++)
	{
		bt[i] = rand()%10;
	}
	for(i=0; i<n; i++)
	{
		printf("%d\t",bt[i]);
	}
	
	avgwt = findWaitingTime(bt,wt,n)/n;
	avgtat = findTurnAroundTime(bt,wt,tat,n)/n;
	printf("\n\n P\tBT\tWT\tTAT\n");
	for(i=0; i<n; i++)
	{
		printf(" %d",i);
		printf("\t%d",bt[i]);
		printf("\t%d",wt[i]);
		printf("\t%d\n",tat[i]);
	}
	printf("\nGannt Chart\n");
	for(i=0; i<n; i++)
	{
		printf("P%d\t",i);
	}
	printf("\n");
	for(i=0; i<n; i++)
	{
		printf("%d\t",wt[i]);
	}
	printf("%d\n",tat[i-1]);
	printf("Average waiting time = %d", avgwt);
	printf("\n");
	printf("Average Turn Around Time = %d", avgtat);
}


-----------------------
Slip 18
-----------------------
Q1
#include<stdio.h>
#define MAX 20

int frames[MAX], ref[MAX], mem[MAX][MAX], faults, sp, m, n, time[MAX];

void accept()
{
	printf("Enter the number of frames: ");
	scanf("%d",&n);
	printf("\nEnter the number of references: ");
	scanf("%d",&m);
	printf("\nEnter reference string: \n");
	for(int i=0; i<m; i++)
	{
		printf("[%d] = ",i);
		scanf("%d",&ref[i]);
	}
}

void disp()
{
	int i,j;
	printf("\n");
	for(i=0; i<m; i++)
		printf("%3d", ref[i]);
	printf("\n\n");
	for(i=0; i<n; i++)
	{
		for(j=0; j<m; j++)
		{
			if(mem[i][j])
				printf("%3d", mem[i][j]);
			else
				printf("   ");
		}
		printf("\n");
	}
	printf("\nTotal page faults = %d\n", faults);
}

int search(int pno)
{
	for(int i=0; i<n; i++)
	{
		if(frames[i] == pno)
			return i;
	}
	return -1;
}

int get_lru()
{
	int i, min_i, min = 9999;
	for(i=0; i<n; i++)
	{
		if(time[i] < min)
		{
			min = time[i];
			min_i = i;
		}
	}
	return min_i;
}

void lru()
{
	int i,j,k;
	for(i=0; i<m && sp<n; i++)
	{
		k = search(ref[i]);
		if(k == -1)
		{
			frames[sp] = ref[i];
			time[sp] = i;
			faults++;
			sp++;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
		else
			time[k] = i;
	}
	
	for(i=0; i<m; i++)
	{
		k = search(ref[i]);
		if(k == -1)
		{
			sp = get_lru();
			frames[sp] = ref[i];
			time[sp] = i;
			faults++;
			for(j=0; j<n; j++)
				mem[j][i] = frames[j];
		}
		else
			time[k] = i;
	}
}

int main()
{
	accept();
	lru();
	disp();
	return 0;
}





********
Q2
#include<stdio.h>

int findWaitingTime(int bt[], int wt[], int n)
{
	int wtavg = 0;
	wt[0] = 0;
	for(int i=0; i<n; i++)
	{
		wt[i] = bt[i-1] + wt[i-1];
		wtavg = wtavg + wt[i];
	}
	return wtavg;
}

int findTurnAroundTime(int bt[], int wt[], int tat[], int n)
{
	int tatavg = 0;
	for(int i=0; i<n; i++)
	{
		tat[i] = wt[i] + bt[i];
		tatavg = tatavg + tat[i];
	}
	return tatavg;
}

void main()
{
	int at[10], bt[10], wt[10], tat[10], i, n, avgwt, avgtat;
	printf("\nEnter the number of processes : ");
	scanf("%d",&n);
	for(i=0; i<n; i++)
	{
		bt[i] = rand()%10;
	}
	for(i=0; i<n; i++)
	{
		printf("%d\t",bt[i]);
	}
	
	avgwt = findWaitingTime(bt,wt,n)/n;
	avgtat = findTurnAroundTime(bt,wt,tat,n)/n;
	printf("\n\n P\tBT\tWT\tTAT\n");
	for(i=0; i<n; i++)
	{
		printf(" %d",i);
		printf("\t%d",bt[i]);
		printf("\t%d",wt[i]);
		printf("\t%d\n",tat[i]);
	}
	printf("\nGannt Chart\n");
	for(i=0; i<n; i++)
	{
		printf("P%d\t",i);
	}
	printf("\n");
	for(i=0; i<n; i++)
	{
		printf("%d\t",wt[i]);
	}
	printf("%d\n",tat[i-1]);
	printf("Average waiting time = %d", avgwt);
	printf("\n");
	printf("Average Turn Around Time = %d", avgtat);
}



-----------------------
Slip 20
-----------------------
Q1
#include<stdio.h> 
#include<sys/types.h> 
#include<sys/stat.h> 
#include<fcntl.h> 
#include<stdlib.h> 
#include<string.h> 
#include<dirent.h> 
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p=strtok(s," "); 
 while(p!=NULL) 
 { 
 tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void typeline(char *fn, char *op) 
{ 
 int fh,i,j,n; 
 char c; 
 fh=open(fn,O_RDONLY); 
 if(fh==-1) 
 { 
 printf("File %s not found.\n",fn); 
 return; 
 } 
 if(strcmp(op,"a")==0) 
 { 
 while(read(fh,&c,1)>0) 
 printf("%c",c); 
 close(fh); 
 return; 
 } 
} 
int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("\nmyshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"typeline")==0) 
 typeline(args[2],args[1]); 
 else if(strcmp(args[0],"exit")==0) 
 exit(0); 
 else 
 { 
 pid=fork(); 
 if(pid>0) 
 wait(NULL); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad Command.\n"); 
 } 
 } 
 } 
}

********
Q2
#include<stdio.h>

int findWaitingTime(int bt[], int wt[], int n)
{
	int wtavg=0, i;
	wt[0] = 0;
	for(i=1; i<n; i++)
	{
		wt[i] = bt[i-1] + wt[i-1];
		wtavg = wtavg + wt[i];
	}
	return wtavg;
}

int findTurnAroundTime(int bt[], int wt[], int tat[], int n)
{
	int tatavg = 0;
	for(int i=0; i<n; i++)
	{
		tat[i] = bt[i] + wt[i];
		tatavg = tatavg + tat[i];
	}
	return tatavg;
}

void sort(int n, int bt[], int p[])
{
	int i,j,pos,temp;
	for(i=0; i<n; i++)
	{
		pos=i;
		for(j=i+1; j<n; j++)
		{
			if(bt[j] < bt[pos])
				pos = j;
		}
		temp = bt[i];
		bt[i] = bt[pos];
		bt[pos] = temp;
		temp = p[i];
		p[i] = p[pos];
		p[pos] = temp;
	}
}

void main()
{
	int bt[10], tat[10], wt[10], p[10], i, n, avgtat, avgwt;
	printf("\nEnter number of processes: ");
	scanf("%d",&n);
	printf("\nEnter burst time: ");
	for(i=0; i<n; i++)
	{
		p[i] = i;
		printf("\nProcess %d: ",p[i]);
		scanf("%d",&bt[i]);
	}
	printf("\nBefore sorting: \n");
	printf("P\tBT\n");
	for(i=0; i<n; i++)
	{
		printf("%d",p[i]);
		printf("\t%d\n",bt[i]);
	}
	sort(n,bt,p);
	printf("\nAfter non preemtive SJF:\n");
	avgwt = findWaitingTime(bt,wt,n)/n;
	avgtat = findTurnAroundTime(bt,wt,tat,n)/n;
	printf("P\tBT\tWT\tTAT\n");
	for(i=0; i<n; i++)
	{
		printf("%d",p[i]);
		printf("\t%d",bt[i]);
		printf("\t%d",wt[i]);
		printf("\t%d\n",tat[i]);
	}
	printf("\nGannt Chart\n");
	for(i=0; i<n; i++)
		printf("p%d\t",i);
	printf("\n");
	for(i=0; i<n; i++)
		printf("%d\t",wt[i]);
	printf("%d\n", tat[i-1]);
	printf("\nAverage waiting time = %d", avgwt);
	printf("\nAverage turn around time = %d\n", avgtat);
}



-----------------------
Slip 22
-----------------------
Q1
#include<stdio.h>
#include<sys/types.h>
void main()
{
int pid,retnice;
pid=fork();
for(i=0;i<5;i++)
{
if(pid==0)
{
retnice=nice(-5);
printf("Child Gets Higher CPU Priority %d \n",retnice);
sleep(1);
}
else
{
retnice=nice(4);
printf("parent Gets Lower CPU Priority %d \n",retnice");
sleep(1);
}
}
}


********
Q2
#include<stdio.h>
int findWaitingTime(int bt[], int wt[], int n)
{
        int  wtavg=0,i;
        wt[0]=0;
        for(i=1;i<n;i++)
        {
                wt[i]=bt[i-1]+wt[i-1]+2;
                wtavg=wtavg+wt[i];
        }
        return(wtavg);
}
int findTurnAroundTime(int bt[],int wt[], int tat[], int n)
{
        int tatavg=0,i;
        for(i=0;i<n;i++)
        {
        tat[i]=bt[i]+wt[i];
        tatavg=tatavg+tat[i];
}
        return(tatavg);
}
void sort(int n, int bt[], int p[], int pr[])
{
        int i, j, pos, temp;
        for(i=0; i<n; i++)
        {
                pos=i;
                for(j=i+1;j<n; j++ )
                {
                	if(pr[j]<pr[pos])
                	{
                        pos=j;
            		}
          		}
          		temp=bt[i];
          		bt[i]=bt[pos];
          		bt[pos]=temp;
        		temp=p[i];
        		p[i]=p[pos];
        		p[pos]=temp;
        		temp=pr[i];
        		pr[i]=pr[pos];
        		pr[pos]=temp;
  }
}
void main()
{
        int  at[10], bt[10], wt[10], tat[10], p[10], pr[10], i,n;
        int avgwt, avgtat;
        printf("\nEnter The Number of Process\n");
        scanf("%d",&n);
        printf("\nEnter The Burst Time and Priority\n");
        for(i=0;i<n;i++)
        {
                p[i]=i;
                printf("\nProcess %d:\t",p[i]);
                scanf("%d %d",&bt[i],&pr[i]);
                printf("\n");
        }
        printf("\nBefore Sorting\n");
        printf("P|\tBT|\tPr\n");
        for(i=0;i<n;i++)
        {
                printf("%d",p[i]);
                printf("\t%d",bt[i]);
                printf("\t%d\n",pr[i]);
        }
        sort(n, bt, p, pr);
        printf("\nAfter The Non Preemptive SJF\n");
        avgwt=findWaitingTime(bt, wt, n)/n;
        avgtat=findTurnAroundTime(bt, wt, tat, n)/n;
        printf("P|\tBT|\tPr|\tWT|\tTAT\n");
        for(i=0; i<n; i++)
        {
                printf("%d",p[i]);
                printf("\t%d", bt[i]);
                printf("\t%d", pr[i]);
                printf("\t%d", wt[i]);
                printf("\t%d\n", tat[i]);
        }
        printf("\nGantt Chart\n");
        for(i=0; i<n; i++)
        {       printf("| P%d ", i);
        }
        printf("|\n");
        for(i=0; i<n; i++)
        {
			printf("%d   ", wt[i]);
        }
        printf("%d\n",tat[i-1]);
        printf("Average Waiting Time= %d", avgwt);
        printf("\n");
        printf("Avegare Turn Around Time= %d", avgtat);
}



-----------------------
Slip 23
-----------------------
Q1
#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>

int main()
{
	int pid = fork();
	if(pid > 0)
	{
		printf("\nI am parent process, my process id is: %d", getpid());
		printf("\nThe parent's parent process id is: %d", getppid());
	}
	else if(pid == 0)
	{
		printf("\n\nIn child process\n");
		printf("\nI am child process, my process id is: %d", getpid());
		printf("\nThe child's parent process id is: %d", getppid());
		sleep(10);
		printf("\n\n----- After 10 seconds -----\n");
		printf("\nI am child process, my process id is: %d", getpid());
		printf("\nThe child's parent process id is: %d", getppid());
	}
	else
	{
		printf("\nFailed to create child process");
	}
	return 0;
}


********
Q2
#include <stdio.h>
#include <limits.h>

int findOptimalIndex(int str[], int frame[], int n, int nf, int startIndex) {
    int res = -1, farthest = -1;
    
    for (int i = 0; i < nf; i++) {
        int j;
        for (j = startIndex; j < n; j++) {
            if (frame[i] == str[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }

        // If a page is not present in the future page references, return its index.
        if (j == n)
            return i;
    }

    return res;
}

int main() {
    int i, n, str[50], frame[10], nf, k, avail, fcount = 0;

    printf("Enter no of pages: ");
    scanf("%d", &n);
    printf("Enter page number: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &str[i]);
    }

    printf("Enter the no of frames: ");
    scanf("%d", &nf);

    for (i = 0; i < nf; i++) {
        frame[i] = -1;
    }

    printf("\n ref string   \t page frame       \thit/fault\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t", str[i]);
        avail = 0; // Default value of avail flag is 0

        for (k = 0; k < nf; k++)
            if (frame[k] == str[i]) {
                avail = 1; // Page found
                for (k = 0; k < nf; k++)
                    printf("%d\t", frame[k]);
                printf("H");
                break;
            }

        if (avail == 0) {
            int replaceIndex = findOptimalIndex(str, frame, n, nf, i + 1);
            frame[replaceIndex] = str[i];
            fcount++;

            for (k = 0; k < nf; k++)
                printf("%d\t", frame[k]);
            printf("F");
        }
        printf("\n");
    }

    printf("Page fault is: %d", fcount);
    return 0;
}

-----------------------
Slip 24
-----------------------
Q1
#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<unistd.h>
void bubble_sort(int[],int);
void insertion_sort(int[],int);
int main()
{
 int i,j,n,*status=NULL,arr[30];
 pid_t pid;
 printf("\n enter the no. of elements::");
 scanf("%d",&n);
 for(i=0;i<n;i++)
 {
 scanf("%d",&arr[i]);
 } 
 pid=fork();
 if(pid==0)
 { 
 printf("\n\t this is child process.");
 printf("\n\t my process id is: %d",getpid());
 printf("\n\t my parent process id is: %d ",getpid());
 insertion_sort(arr,n);
 printf("\n\t insertion sort:\n \n");
 for(i=0;i<n;i++)
 printf("%5d",arr[i]);
 printf("\n\n");
 }
 else
 {
 printf("\n\t parent process resumed after the execution of child process with pit %d",pid);
 printf("\n\t my process id is: %d",getpid());
 printf("\n\t my parent process id is: %d" ,getpid());
 bubble_sort(arr,n);
 printf("\n bubble sort\n \n");
 for(i=0;i<n;i++)
 printf("%5d",arr[i]);
 printf("\n\n");
 pid= wait(status);
 }
 }
 void bubble_sort(int *a,int n) 
 {
 int i,j,temp;
 for(i=0;i<n;i++)
 {
 for(j=0;j<n-1;j++)
 {
 if(a[j]>a[j+1])
 { 
 temp=a[j];
 a[j]=a[j+1];
 a[j+1]=temp;
 }
 }
 } 
 }
 void insertion_sort(int *a,int n) 
 { 
 int i,j,temp;
 for(i=0;i<n;i++)
 {
 temp=a[i];
 for (j=i-1;j>0 && temp<a[j]; j--)
 a[j+1]=a[j];
 a[j+1]=temp;
 }
 }


********
Q2
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<stdlib.h>
#include<string.h>
#include<dirent.h>
void make_toks(char *s, char *tok[])
{
int i=0;
char *p;
p=strtok(s," ");
while(p!=NULL)
{
tok[i++]=p;
p=strtok(NULL," ");
}
tok[i]=NULL;
}
void count(char *fn, char op)
{
int fh,cc=0,wc=0,lc=0;
char c;
fh=open(fn,O_RDONLY);
if(fh==-1)
{
printf("File %s not found.\n",fn);
return;
}
while(read(fh,&c,1)>0)
{
if(c==' ')
wc++;
else if(c=='\n')
{
wc++;
lc++;
}
cc++;
}
close(fh);
switch(op)
{
case 'c':
printf("No. of Chracters:%d\n",cc);
break;
case 'w':
printf("No. of Words:%d\n",wc);
break;
case 'l':
printf("No. of Lines:%d\n",lc);
break;
}
}
int main()
{
char buff[80],*args[10];
int pid;
while(1)
{
printf("\nmyshell$");
fflush(stdin);
fgets(buff,80,stdin);
buff[strlen(buff)-1]='\0';
make_toks(buff,args);
if(strcmp(args[0],"count")==0)
count(args[2],args[1][0]);
else
{
pid=fork();
if(pid>0)
wait();
else
{
if(execvp(args[0],args)==-1)
printf("Bad Command.\n");
exit(0);
}
}
}
}

**************************************--------------------------------------------------------------------------------************************************************